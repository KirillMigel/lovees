// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum SwipeDirection {
  RIGHT
  LEFT
  SUPER
}

enum ReportReason {
  SPAM
  INAPPROPRIATE_CONTENT
  HARASSMENT
  FAKE_PROFILE
  UNDERAGE
  OTHER
}

enum UserRole {
  USER
  ADMIN
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Main application models
model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String?   // Nullable for OAuth users
  name         String
  birthdate    DateTime
  gender       Gender
  bio          String?   @db.Text
  city         String
  latitude     Decimal?  @db.Decimal(9, 6)
  longitude    Decimal?  @db.Decimal(9, 6)
  interests    String[]  // PostgreSQL text array
  isBanned     Boolean   @default(false)
  role         UserRole  @default(USER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // App relations
  photos        Photo[]
  preference    Preference?
  swipesGiven   Swipe[]     @relation("SwiperUser")
  swipesReceived Swipe[]    @relation("TargetUser")
  matchesAsA    Match[]     @relation("UserA")
  matchesAsB    Match[]     @relation("UserB")
  messagesSent  Message[]
  reportsMade   Report[]    @relation("ReporterUser")
  reportsReceived Report[]  @relation("ReportedUser")
  blocksGiven     Block[]   @relation("BlockerUser")
  blocksReceived  Block[]   @relation("BlockedUser")

  @@index([latitude, longitude])
  @@index([isBanned])
  @@index([createdAt])
  @@index([role])
}

model Photo {
  id        String   @id @default(cuid())
  userId    String
  url       String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isPrimary])
}

model Preference {
  userId     String   @id
  minAge     Int
  maxAge     Int
  distanceKm Int
  genders    Gender[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Swipe {
  id         String         @id @default(cuid())
  swiperId   String
  targetId   String
  direction  SwipeDirection
  createdAt  DateTime       @default(now())

  swiper User @relation("SwiperUser", fields: [swiperId], references: [id], onDelete: Cascade)
  target User @relation("TargetUser", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([swiperId, targetId])
  @@index([swiperId])
  @@index([targetId])
  @@index([createdAt])
}

model Match {
  id       String   @id @default(cuid())
  userAId  String
  userBId  String
  createdAt DateTime @default(now())

  userA User @relation("UserA", fields: [userAId], references: [id], onDelete: Cascade)
  userB User @relation("UserB", fields: [userBId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([userAId, userBId])
  @@index([userAId])
  @@index([userBId])
  @@index([createdAt])
}

model Message {
  id        String    @id @default(cuid())
  matchId   String
  senderId  String
  text      String    @db.Text
  createdAt DateTime  @default(now())
  readAt    DateTime?

  match  Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  sender User  @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([matchId])
  @@index([senderId])
  @@index([createdAt])
}

model Report {
  id          String       @id @default(cuid())
  reporterId  String
  reportedId  String
  reason      ReportReason
  description String?      @db.Text
  createdAt   DateTime     @default(now())

  reporter User @relation("ReporterUser", fields: [reporterId], references: [id], onDelete: Cascade)
  reported User @relation("ReportedUser", fields: [reportedId], references: [id], onDelete: Cascade)

  @@index([reporterId])
  @@index([reportedId])
  @@index([reason])
  @@index([createdAt])
}

model Block {
  id        String   @id @default(cuid())
  userId    String   // User who blocked
  blockedId String   // User who was blocked
  createdAt DateTime @default(now())

  user    User @relation("BlockerUser", fields: [userId], references: [id], onDelete: Cascade)
  blocked User @relation("BlockedUser", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([userId, blockedId])
  @@index([userId])
  @@index([blockedId])
  @@index([createdAt])
}
